class Prenda {

    private int precio;
    private TipoPrenda tipo;

    public Prenda (int precio, TipoPrenda tipo){
        this.precio = precio;
        this.TipoPrenda = tipo;
    }

    public int calcularPrecio() {
        return precio + tipo.adicional(precio);
    }

}

enum TipoPrenda {
    // es una constante que se define como un valor predefinido en la aplicacion,
    //facilita todo el procedimiento aunque la desventaja es que si se quiere cambiar tenemos que recompilar
    private static int valorFijo = 10;

    NUEVA {
        public int adicional(int precio){    return 0; }
    }
    PROMOCION {
        public int adicional(int precio){ return  valorFijo; }
    }
    LIQUIDACION {
        public int adicional(int precio){ return precio/2; }
    }

}
abstract class Venta {

    private Map<Prenda> prendas; //(prenda, cantidad)
    private Date fecha;

    public Venta (Map<Prenda> prendas, Date fecha) {
        this.fecha = fecha;
    }

    private abstract int calcularPrecio();

    public List<Prenda> getPrendas() {
        //TODO una forma de hacer que me devuelva una lista con las prendas
    }

    public Date getFecha() {
        return fecha;
    }
}

class VentaEfectivo extends Venta {

    public VentaEfectivo (Map<Prenda> prendas, Date fecha) {
        super(prendas, fecha);
    }

    @override
    private abstract int calcularPrecio() {
        return this.getPrendas().calcularPrecio();
    }
}

class VentaTarjeta extends Venta {

    private int cuotas;
    private int coeFijo;

    public VentaTarjeta (Map<Prenda> prendas, Date fecha, int cuotas) {
        super(prendas, fecha);
    }

    @override
    private abstract int calcularPrecio() {
        int precio = this.getPrendas().sum(prenda -> prenda.calcularPrecio());
        return  precio + (cuotas * coeFijo + 0.01 * precio);
    }

    public void setCoeFijo(int valor) { this.coeFijo = valor; }
}

class RepositorioVentas {
    private List<Venta> ventas = new ArrayList<>();

    public int gananciaDeFecha(Date fechaEspecifica) {
        int valor = 0;
        ventas.forEach(venta ->
            if (venta.getFecha().equals(fechaEspecifica)) valor = valor + venta.calcularPrecio();
        )

        return valor;
    }
}